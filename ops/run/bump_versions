#!/usr/bin/env python3 -u
#
# This script updates the versions of all model configurations in the provided
# directory.
#

import argparse
import pathlib
import json
import subprocess
import shlex

if __name__ == "__main__":
    parser = argparse.ArgumentParser(prog="bump_versions")
    parser.add_argument("path", type=pathlib.PosixPath)
    parser.add_argument("--dry-run", action="store_true")
    args = parser.parse_args()

    cluster = subprocess.check_output(shlex.split("kubectl config current-context"), encoding="utf-8").strip()
    print(f"NOTE: You're connected to cluster {cluster}, versions will be compared to what's deployed there")

    path: pathlib.PosixPath = args.path
    for file in path.iterdir():
        if not file.is_file():
            continue

        print(f"Modifying {file}...")
        with open(file, "r+") as fh:
            spec = json.load(fh)

            model = spec["model"]
            version = int(spec["version"])
            next = version + 1

            # Do some sanity checking against what's in Kubernetes
            stream_config = json.loads(subprocess.check_output(shlex.split(
                f"kubectl get configuration.serving.knative.dev/stream -n {model} -o json"
            ), encoding="utf-8").strip())
            stream_k8s_version: int = stream_config["status"]["observedGeneration"]

            validate_config = json.loads(subprocess.check_output(shlex.split(
                f"kubectl get configuration.serving.knative.dev/validate -n {model} -o json"
            ), encoding="utf-8").strip())
            validate_k8s_version: int = validate_config["status"]["observedGeneration"]

            assert(stream_k8s_version == validate_k8s_version)
            diff = next - stream_k8s_version

            # Fast forward, and tell the user
            if diff <= 0:
                print(f"WARNING {model}'s next version {next} is not greater than k8s version {stream_k8s_version}, incrementing by {diff+2}")
                next += diff + 1

            diff = next - stream_k8s_version
            assert(diff >= 0)

            # This is just a warning, albeit not great
            if diff > 1:
                print(f"WARNING: model {model}'s {next} is more than 1 version beyond k8s version {stream_k8s_version}")

            spec["version"] = next

            if not args.dry_run:
                fh.truncate(0)
                fh.seek(0)
                json.dump(spec, fh, indent=2)

            print(f"Changed version of {model} from {version} to {next} in {file}")
            print()

    print("OK")





